## Carrregamento automático das bibliotecas
if(require(XML) == F){
  install.packages("XML")
}
library(XML)

if(require(httr) == F){
  install.packages("httr")
}
library(httr)

if(require(tidyr) == F){
  install.packages("tidyr")
}
library(tidyr)

if(require(beepr) == F){
  install.packages("beepr")
}
library(beepr)

## O trabalho realizado é uma função que extrai e sistematiza as transferências da União
## ...para o município presentes no Portal Transparência.

coletarTransparenciaAno <- function(ano, uf) {
  
  # carregamento da base que contem os codigos siafi dos municipios
  arquivo <- "https://raw.githubusercontent.com/lucaseosilva/transfBR/master/siafi.csv"
  siafi <- read.table(arquivo, header = T, sep = ",", stringsAsFactors = F)
  
  # selecionando os municipios da uf selecionada pelo usuario
  uf_cidades <- siafi[siafi$uf==uf, ]
  
  # frame em branco
  agregado <- data.frame()
  
  # percorrendo pela quantidade de municipios presentes naquela uf
  for(i in 1:nrow(uf_cidades)){
    # percorrendo pela quantidade de paginas referentes às transferências naquele mun.
    pagina <- 1
    while(pagina>=1){
      # estrutura de decisão para incrementar um zero à esquerda nos municipios com o cod <1000
      if(nchar(as.character(uf_cidades$codigo[i]))>=4){
        url <- gettextf("http://transparencia.gov.br/PortalTransparenciaListaAcoes.asp?Exercicio=%s&SelecaoUF=1&SiglaUF=%s&CodMun=%s&Pagina=%s", 
                        ano, uf, uf_cidades$codigo[i], pagina)      
      }
      else{
        url <- gettextf("http://transparencia.gov.br/PortalTransparenciaListaAcoes.asp?Exercicio=%s&SelecaoUF=1&SiglaUF=%s&CodMun=0%s&Pagina=%s", 
                        ano, uf, uf_cidades$codigo[i], pagina)      
      }
      
      # verificando se aquela uma determinada pag. existe
      # caso não haja, a estrutura de repetição é quebrada e algoritmo avança para o prox. mun
      response <- GET(url)
      if (response$status_code!=200){
        break
      }
      # lendo as tabelas da pag
      lista.tabelas <- readHTMLTable(url, stringsAsFactors = F, encoding = "UTF-8")
      
      # selecionando a tabela de interesse
      tabela <- lista.tabelas[[2]]
      
      # acrescentando algumas infos
      tabela$ano <- ano
      tabela$uf <- uf
      tabela$codSiafi <- uf_cidades$codigo[i]
      tabela$nomeMunicipio <- uf_cidades$cidade[i]
      
      # agregando no frame final
      agregado <- rbind(agregado, tabela)
      
      # contador 
      pagina <- pagina+1
    }
  }
  
  # modificando a ordem das variaveis
  agregado <- agregado[,c(5:8,1:4)]
  
  # renomeando as vars
  names(agregado) <- c("ANO", "UF", "COD_SIAFI", "MUNICIPIO", "FUNCAO","ACAO_GOV","LINGUAGEM_CIDADA","TOTAL_VALOR_REAIS")
  
  # quebrando ACAO_GOV em COD_ACAO_GOV e DESC_ACAO_GOV
  agregado <- separate(agregado, ACAO_GOV, c('COD_ACAO_GOV', 'DESC_ACAO_GOV'), sep=' - ', remove=TRUE)
  
  # transformando TOTAL_VALOR_REAIS em numero
  agregado$TOTAL_VALOR_REAIS <- gsub("\\.","", agregado$TOTAL_VALOR_REAIS)
  agregado$TOTAL_VALOR_REAIS <- as.numeric(gsub(",", ".", agregado$TOTAL_VALOR_REAIS))
  
  ### avisa que está pronto!
  beep(4)
  
  #retornando o frame resultante
  return (agregado)
  
}
